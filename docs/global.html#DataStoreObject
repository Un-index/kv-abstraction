<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Namespace: DataStoreObject</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Namespace: DataStoreObject</h1>

    




<section>

<header>
    
        <h2>DataStoreObject</h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        

        


<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line9">line 9</a>
    </li></ul></dd>
    

    

    

    
</dl>


        
    
    </div>

    

    

    

    

    

    

    

    
        <h3 class="subsection-title">Methods</h3>

        
            

    

    
    <h4 class="name" id=".Destroy"><span class="type-signature">(static) </span>Destroy<span class="signature">()</span><span class="type-signature"> &rarr; {void}</span></h4>
    

    



<div class="description">
    ends / kills connection to a database
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line247">line 247</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">void</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".Get"><span class="type-signature">(static) </span>Get<span class="signature">(key, callback)</span><span class="type-signature"> &rarr; {any}</span></h4>
    

    



<div class="description">
    retrieves the value associated to the specified key synchronously
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>key</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            

            <td class="description last">the key to retrieve a value for - if the retrieved value was JSON Encoded then it will automatically be parsed into a Javascript object for you</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>callback</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#GetCallback">GetCallback</a></span>


            
            </td>

            

            

            <td class="description last">the callback to pass the retrieved value to - make sure to handle errors as well using the second parameter</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line214">line 214</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">any</span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>let kv = require("kv-abstraction");let DataStoreObject = kv.GetDataStore(dataStoreName: string, hostname ? : string, user: string, pass: string, dbName: string, portName ? : string, debug: boolean);DataStoreObject.Get("key", function(value, err) {    if (err) {        console.log("err = "+err)    };    console.log("value = " + value);});</code></pre>



        
            

    

    
    <h4 class="name" id=".GetAsync"><span class="type-signature">(async, static) </span>GetAsync<span class="signature">(key)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    retrieves the value associated to the specified key asynchronously
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>key</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            

            <td class="description last">the key to retrieve a value for - if the retrieved value was JSON Encoded then it will automatically be parsed into a Javascript object for you</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line165">line 165</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    value - returns a Promise object that resolves to the value associated with the specified key
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>let kv = require("kv-abstraction");let DataStoreObject = kv.GetDataStore(dataStoreName: string, hostname ? : string, user: string, pass: string, dbName: string, portName ? : string, debug: boolean);DataStoreObject.Get("key").then((value) => {    console.log("value = " + value)}, (err) => {    console.log(err)});</code></pre>



        
            

    

    
    <h4 class="name" id="Set"><span class="type-signature"></span>Set<span class="signature">(key, value)</span><span class="type-signature"> &rarr; {*}</span></h4>
    

    



<div class="description">
    saves a value to the specified key
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>key</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            

            <td class="description last">the key to associate a value with</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>value</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            

            <td class="description last">the value to associate with the specified key; you can supply any valid Javascript object that can be saved (the value has JSON.stringify called on it internally to return a string before saving - the string can have a maximum of 4,000,000 characters)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line123">line 123</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    value - returns the specified value back
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">*</span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>let kv = require("kv-abstraction");let DataStoreObject = kv.GetDataStore(dataStoreName: string, hostname ? : string, user: string, pass: string, dbName: string, portName ? : string, debug: boolean);DataStoreObject.Set("key", 10);             // validDataStoreObject.Set("key", "10");           // validDataStoreObject.Set("key", {a:"1", b:"2"}); // valid</code></pre>



        
    

    

    
</article>

</section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Namespaces</h3><ul><li><a href="global.html#DataStoreObject">DataStoreObject</a></li><li><a href="obj.html">obj</a></li></ul><h3><a href="global.html">Global</a></h3>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.6</a> on Sun Nov 22 2020 01:31:23 GMT+0300 (Arabian Standard Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>